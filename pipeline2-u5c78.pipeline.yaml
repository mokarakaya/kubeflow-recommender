apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: pipeline2-u5c78-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.0.0-rc.2, pipelines.kubeflow.org/pipeline_compilation_time: '2020-11-08T22:21:14.006902',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "pipeline", "inputs": [{"default":
      "http://rok.rok.svc.cluster.local/swift/v1/kubeflow-user/notebooks/jupyter-kale-05-1-0_jupyter-kale-05-1-vol-1-cqvv2obcc?version=c2fb1679-0f4c-4599-ba8c-a0b815fcd489",
      "name": "rok_jupyter_kale_05_1_vol_1_cqvv2obcc_url", "optional": true}, {"default":
      "http://rok.rok.svc.cluster.local/swift/v1/kubeflow-user/notebooks/jupyter-kale-05-1-0_workspace-jupyter-kale-05-1-2s0txj2ty?version=254b9211-2faa-4f04-b828-29d8ccd76b00",
      "name": "rok_workspace_jupyter_kale_05_1_2s0txj2ty_url", "optional": true}],
      "name": "pipeline2-u5c78"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.0.0-rc.2}
spec:
  entrypoint: pipeline2-u5c78
  templates:
  - name: buildrec
    container:
      args: []
      command:
      - python3
      - -u
      - -c
      - |
        def buildrec():
            from kale.common import mlmdutils as _kale_mlmdutils
            _kale_mlmdutils.init_metadata()

            from kale.common import podutils as _kale_podutils
            _kale_mlmdutils.call("link_input_rok_artifacts")
            _kale_podutils.snapshot_pipeline_step(
                "pipeline2-u5c78",
                "buildrec",
                "/home/jovyan/Untitled.ipynb",
                before=True)

            data_loading_block = '''
            # -----------------------DATA LOADING START--------------------------------
            from kale.marshal import utils as _kale_marshal_utils
            _kale_marshal_utils.set_kale_data_directory("/home/jovyan/.Untitled.ipynb.kale.marshal.dir")
            REPOSITORY = _kale_marshal_utils.load("REPOSITORY")
            run_sub = _kale_marshal_utils.load("run_sub")
            subprocess = _kale_marshal_utils.load("subprocess")
            # -----------------------DATA LOADING END----------------------------------
            '''

            block1 = '''
            run_sub('python3 steps/build_model_step/build_model.py', REPOSITORY)
            '''

            data_saving_block = '''
            # -----------------------DATA SAVING START---------------------------------
            from kale.marshal import utils as _kale_marshal_utils
            _kale_marshal_utils.set_kale_data_directory("/home/jovyan/.Untitled.ipynb.kale.marshal.dir")
            _kale_marshal_utils.save(REPOSITORY, "REPOSITORY")
            _kale_marshal_utils.save(run_sub, "run_sub")
            _kale_marshal_utils.save(subprocess, "subprocess")
            # -----------------------DATA SAVING END-----------------------------------
            '''

            # run the code blocks inside a jupyter kernel
            from kale.common.jputils import run_code as _kale_run_code
            from kale.common.kfputils import \
                update_uimetadata as _kale_update_uimetadata
            blocks = (data_loading_block,
                      block1,
                      data_saving_block)
            html_artifact = _kale_run_code(blocks)
            with open("/buildrec.html", "w") as f:
                f.write(html_artifact)
            _kale_update_uimetadata('buildrec')

            _rok_snapshot_task = _kale_podutils.snapshot_pipeline_step(
                "pipeline2-u5c78",
                "buildrec",
                "/home/jovyan/Untitled.ipynb",
                before=False)
            _kale_mlmdutils.call("submit_output_rok_artifact", _rok_snapshot_task)

            _kale_mlmdutils.call("mark_execution_complete")

        import argparse
        _parser = argparse.ArgumentParser(prog='Buildrec', description='')
        _parsed_args = vars(_parser.parse_args())

        _outputs = buildrec(**_parsed_args)
      image: gcr.io/arrikto/jupyter-kale:v0.5.0-47-g2427cc9
      securityContext: {runAsUser: 0}
      volumeMounts:
      - {mountPath: /home/jovyan, name: create-volume-1}
      - {mountPath: /home/jovyan/jupyter-kale-05-1-vol-1, name: create-volume-2}
      workingDir: /home/jovyan
    inputs:
      parameters:
      - {name: create-volume-1-name}
      - {name: create-volume-2-name}
    outputs:
      artifacts:
      - {name: mlpipeline-ui-metadata, path: /mlpipeline-ui-metadata.json}
      - {name: buildrec, path: /buildrec.html}
    metadata:
      annotations: {kubeflow-kale.org/dependent-templates: '["Preprocessrec", "create-volume-1",
          "create-volume-2"]', kubeflow-kale.org/volume-name-parameters: '["create-volume-1-name",
          "create-volume-2-name"]', pipelines.kubeflow.org/component_spec: '{"implementation":
          {"container": {"args": [], "command": ["python3", "-u", "-c", "def buildrec():\n    from
          kale.common import mlmdutils as _kale_mlmdutils\n    _kale_mlmdutils.init_metadata()\n\n    from
          kale.common import podutils as _kale_podutils\n    _kale_mlmdutils.call(\"link_input_rok_artifacts\")\n    _kale_podutils.snapshot_pipeline_step(\n        \"pipeline2-u5c78\",\n        \"buildrec\",\n        \"/home/jovyan/Untitled.ipynb\",\n        before=True)\n\n    data_loading_block
          = ''''''\n    # -----------------------DATA LOADING START--------------------------------\n    from
          kale.marshal import utils as _kale_marshal_utils\n    _kale_marshal_utils.set_kale_data_directory(\"/home/jovyan/.Untitled.ipynb.kale.marshal.dir\")\n    REPOSITORY
          = _kale_marshal_utils.load(\"REPOSITORY\")\n    run_sub = _kale_marshal_utils.load(\"run_sub\")\n    subprocess
          = _kale_marshal_utils.load(\"subprocess\")\n    # -----------------------DATA
          LOADING END----------------------------------\n    ''''''\n\n    block1
          = ''''''\n    run_sub(''python3 steps/build_model_step/build_model.py'',
          REPOSITORY)\n    ''''''\n\n    data_saving_block = ''''''\n    # -----------------------DATA
          SAVING START---------------------------------\n    from kale.marshal import
          utils as _kale_marshal_utils\n    _kale_marshal_utils.set_kale_data_directory(\"/home/jovyan/.Untitled.ipynb.kale.marshal.dir\")\n    _kale_marshal_utils.save(REPOSITORY,
          \"REPOSITORY\")\n    _kale_marshal_utils.save(run_sub, \"run_sub\")\n    _kale_marshal_utils.save(subprocess,
          \"subprocess\")\n    # -----------------------DATA SAVING END-----------------------------------\n    ''''''\n\n    #
          run the code blocks inside a jupyter kernel\n    from kale.common.jputils
          import run_code as _kale_run_code\n    from kale.common.kfputils import
          \\\n        update_uimetadata as _kale_update_uimetadata\n    blocks = (data_loading_block,\n              block1,\n              data_saving_block)\n    html_artifact
          = _kale_run_code(blocks)\n    with open(\"/buildrec.html\", \"w\") as f:\n        f.write(html_artifact)\n    _kale_update_uimetadata(''buildrec'')\n\n    _rok_snapshot_task
          = _kale_podutils.snapshot_pipeline_step(\n        \"pipeline2-u5c78\",\n        \"buildrec\",\n        \"/home/jovyan/Untitled.ipynb\",\n        before=False)\n    _kale_mlmdutils.call(\"submit_output_rok_artifact\",
          _rok_snapshot_task)\n\n    _kale_mlmdutils.call(\"mark_execution_complete\")\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Buildrec'', description='''')\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = buildrec(**_parsed_args)\n"],
          "image": "gcr.io/arrikto/jupyter-kale:v0.5.0-47-g2427cc9"}}, "name": "Buildrec"}',
        pipelines.kubeflow.org/component_ref: '{}'}
      labels:
        access-ml-pipeline: "true"
        access-rok: "true"
        pipelines.kubeflow.org/metadata_written: "true"
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
    volumes:
    - name: create-volume-1
      persistentVolumeClaim: {claimName: '{{inputs.parameters.create-volume-1-name}}'}
    - name: create-volume-2
      persistentVolumeClaim: {claimName: '{{inputs.parameters.create-volume-2-name}}'}
  - name: create-volume-1
    resource:
      action: create
      manifest: |
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          annotations:
            rok/origin: '{{inputs.parameters.rok_workspace_jupyter_kale_05_1_2s0txj2ty_url}}'
          name: '{{workflow.name}}-workspace-jupyter-kale-05-1-2s0txj2ty'
        spec:
          accessModes:
          - ReadWriteMany
          resources:
            requests:
              storage: 5Gi
    inputs:
      parameters:
      - {name: rok_workspace_jupyter_kale_05_1_2s0txj2ty_url}
    outputs:
      parameters:
      - name: create-volume-1-manifest
        valueFrom: {jsonPath: '{}'}
      - name: create-volume-1-name
        valueFrom: {jsonPath: '{.metadata.name}'}
      - name: create-volume-1-size
        valueFrom: {jsonPath: '{.status.capacity.storage}'}
    metadata:
      labels: {pipelines.kubeflow.org/pipeline-sdk-type: kfp}
  - name: create-volume-2
    resource:
      action: create
      manifest: |
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          annotations:
            rok/origin: '{{inputs.parameters.rok_jupyter_kale_05_1_vol_1_cqvv2obcc_url}}'
          name: '{{workflow.name}}-jupyter-kale-05-1-vol-1-cqvv2obcc'
        spec:
          accessModes:
          - ReadWriteMany
          resources:
            requests:
              storage: 5Gi
    inputs:
      parameters:
      - {name: rok_jupyter_kale_05_1_vol_1_cqvv2obcc_url}
    outputs:
      parameters:
      - name: create-volume-2-manifest
        valueFrom: {jsonPath: '{}'}
      - name: create-volume-2-name
        valueFrom: {jsonPath: '{.metadata.name}'}
      - name: create-volume-2-size
        valueFrom: {jsonPath: '{.status.capacity.storage}'}
    metadata:
      labels: {pipelines.kubeflow.org/pipeline-sdk-type: kfp}
  - name: importrec
    container:
      args: []
      command:
      - python3
      - -u
      - -c
      - |
        def importrec():
            from kale.common import mlmdutils as _kale_mlmdutils
            _kale_mlmdutils.init_metadata()

            from kale.common import podutils as _kale_podutils
            _kale_mlmdutils.call("link_input_rok_artifacts")
            _kale_podutils.snapshot_pipeline_step(
                "pipeline2-u5c78",
                "importrec",
                "/home/jovyan/Untitled.ipynb",
                before=True)

            block1 = '''
            import subprocess

            REPOSITORY='kubeflow-recommender'
            def run_sub(command, cwd=None):
                print(subprocess.check_output(command.split(' '), cwd=cwd))

            try:
                run_sub('git clone https://github.com/mokarakaya/kubeflow-recommender.git')
            except:
                print('error while fetching repo')
            run_sub('python3 --version', REPOSITORY)
            '''

            data_saving_block = '''
            # -----------------------DATA SAVING START---------------------------------
            from kale.marshal import utils as _kale_marshal_utils
            _kale_marshal_utils.set_kale_data_directory("/home/jovyan/.Untitled.ipynb.kale.marshal.dir")
            _kale_marshal_utils.save(REPOSITORY, "REPOSITORY")
            _kale_marshal_utils.save(run_sub, "run_sub")
            _kale_marshal_utils.save(subprocess, "subprocess")
            # -----------------------DATA SAVING END-----------------------------------
            '''

            # run the code blocks inside a jupyter kernel
            from kale.common.jputils import run_code as _kale_run_code
            from kale.common.kfputils import \
                update_uimetadata as _kale_update_uimetadata
            blocks = (
                block1,
                data_saving_block)
            html_artifact = _kale_run_code(blocks)
            with open("/importrec.html", "w") as f:
                f.write(html_artifact)
            _kale_update_uimetadata('importrec')

            _rok_snapshot_task = _kale_podutils.snapshot_pipeline_step(
                "pipeline2-u5c78",
                "importrec",
                "/home/jovyan/Untitled.ipynb",
                before=False)
            _kale_mlmdutils.call("submit_output_rok_artifact", _rok_snapshot_task)

            _kale_mlmdutils.call("mark_execution_complete")

        import argparse
        _parser = argparse.ArgumentParser(prog='Importrec', description='')
        _parsed_args = vars(_parser.parse_args())

        _outputs = importrec(**_parsed_args)
      image: gcr.io/arrikto/jupyter-kale:v0.5.0-47-g2427cc9
      securityContext: {runAsUser: 0}
      volumeMounts:
      - {mountPath: /home/jovyan, name: create-volume-1}
      - {mountPath: /home/jovyan/jupyter-kale-05-1-vol-1, name: create-volume-2}
      workingDir: /home/jovyan
    inputs:
      parameters:
      - {name: create-volume-1-name}
      - {name: create-volume-2-name}
    outputs:
      artifacts:
      - {name: mlpipeline-ui-metadata, path: /mlpipeline-ui-metadata.json}
      - {name: importrec, path: /importrec.html}
    metadata:
      annotations: {kubeflow-kale.org/dependent-templates: '["create-volume-1", "create-volume-2"]',
        kubeflow-kale.org/volume-name-parameters: '["create-volume-1-name", "create-volume-2-name"]',
        pipelines.kubeflow.org/component_spec: '{"implementation": {"container": {"args":
          [], "command": ["python3", "-u", "-c", "def importrec():\n    from kale.common
          import mlmdutils as _kale_mlmdutils\n    _kale_mlmdutils.init_metadata()\n\n    from
          kale.common import podutils as _kale_podutils\n    _kale_mlmdutils.call(\"link_input_rok_artifacts\")\n    _kale_podutils.snapshot_pipeline_step(\n        \"pipeline2-u5c78\",\n        \"importrec\",\n        \"/home/jovyan/Untitled.ipynb\",\n        before=True)\n\n    block1
          = ''''''\n    import subprocess\n\n    REPOSITORY=''kubeflow-recommender''\n    def
          run_sub(command, cwd=None):\n        print(subprocess.check_output(command.split(''
          ''), cwd=cwd))\n\n    try:\n        run_sub(''git clone https://github.com/mokarakaya/kubeflow-recommender.git'')\n    except:\n        print(''error
          while fetching repo'')\n    run_sub(''python3 --version'', REPOSITORY)\n    ''''''\n\n    data_saving_block
          = ''''''\n    # -----------------------DATA SAVING START---------------------------------\n    from
          kale.marshal import utils as _kale_marshal_utils\n    _kale_marshal_utils.set_kale_data_directory(\"/home/jovyan/.Untitled.ipynb.kale.marshal.dir\")\n    _kale_marshal_utils.save(REPOSITORY,
          \"REPOSITORY\")\n    _kale_marshal_utils.save(run_sub, \"run_sub\")\n    _kale_marshal_utils.save(subprocess,
          \"subprocess\")\n    # -----------------------DATA SAVING END-----------------------------------\n    ''''''\n\n    #
          run the code blocks inside a jupyter kernel\n    from kale.common.jputils
          import run_code as _kale_run_code\n    from kale.common.kfputils import
          \\\n        update_uimetadata as _kale_update_uimetadata\n    blocks = (\n        block1,\n        data_saving_block)\n    html_artifact
          = _kale_run_code(blocks)\n    with open(\"/importrec.html\", \"w\") as f:\n        f.write(html_artifact)\n    _kale_update_uimetadata(''importrec'')\n\n    _rok_snapshot_task
          = _kale_podutils.snapshot_pipeline_step(\n        \"pipeline2-u5c78\",\n        \"importrec\",\n        \"/home/jovyan/Untitled.ipynb\",\n        before=False)\n    _kale_mlmdutils.call(\"submit_output_rok_artifact\",
          _rok_snapshot_task)\n\n    _kale_mlmdutils.call(\"mark_execution_complete\")\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Importrec'', description='''')\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = importrec(**_parsed_args)\n"],
          "image": "gcr.io/arrikto/jupyter-kale:v0.5.0-47-g2427cc9"}}, "name": "Importrec"}',
        pipelines.kubeflow.org/component_ref: '{}'}
      labels:
        access-ml-pipeline: "true"
        access-rok: "true"
        pipelines.kubeflow.org/metadata_written: "true"
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
    volumes:
    - name: create-volume-1
      persistentVolumeClaim: {claimName: '{{inputs.parameters.create-volume-1-name}}'}
    - name: create-volume-2
      persistentVolumeClaim: {claimName: '{{inputs.parameters.create-volume-2-name}}'}
  - name: installrec
    container:
      args: []
      command:
      - python3
      - -u
      - -c
      - |
        def installrec():
            from kale.common import mlmdutils as _kale_mlmdutils
            _kale_mlmdutils.init_metadata()

            from kale.common import podutils as _kale_podutils
            _kale_mlmdutils.call("link_input_rok_artifacts")
            _kale_podutils.snapshot_pipeline_step(
                "pipeline2-u5c78",
                "installrec",
                "/home/jovyan/Untitled.ipynb",
                before=True)

            data_loading_block = '''
            # -----------------------DATA LOADING START--------------------------------
            from kale.marshal import utils as _kale_marshal_utils
            _kale_marshal_utils.set_kale_data_directory("/home/jovyan/.Untitled.ipynb.kale.marshal.dir")
            REPOSITORY = _kale_marshal_utils.load("REPOSITORY")
            run_sub = _kale_marshal_utils.load("run_sub")
            subprocess = _kale_marshal_utils.load("subprocess")
            # -----------------------DATA LOADING END----------------------------------
            '''

            block1 = '''
            run_sub('pip3 install -r requirements.txt', REPOSITORY)
            run_sub('python3 setup.py build', REPOSITORY)
            run_sub('python3 setup.py install --user', REPOSITORY)
            '''

            data_saving_block = '''
            # -----------------------DATA SAVING START---------------------------------
            from kale.marshal import utils as _kale_marshal_utils
            _kale_marshal_utils.set_kale_data_directory("/home/jovyan/.Untitled.ipynb.kale.marshal.dir")
            _kale_marshal_utils.save(REPOSITORY, "REPOSITORY")
            _kale_marshal_utils.save(run_sub, "run_sub")
            _kale_marshal_utils.save(subprocess, "subprocess")
            # -----------------------DATA SAVING END-----------------------------------
            '''

            # run the code blocks inside a jupyter kernel
            from kale.common.jputils import run_code as _kale_run_code
            from kale.common.kfputils import \
                update_uimetadata as _kale_update_uimetadata
            blocks = (data_loading_block,
                      block1,
                      data_saving_block)
            html_artifact = _kale_run_code(blocks)
            with open("/installrec.html", "w") as f:
                f.write(html_artifact)
            _kale_update_uimetadata('installrec')

            _rok_snapshot_task = _kale_podutils.snapshot_pipeline_step(
                "pipeline2-u5c78",
                "installrec",
                "/home/jovyan/Untitled.ipynb",
                before=False)
            _kale_mlmdutils.call("submit_output_rok_artifact", _rok_snapshot_task)

            _kale_mlmdutils.call("mark_execution_complete")

        import argparse
        _parser = argparse.ArgumentParser(prog='Installrec', description='')
        _parsed_args = vars(_parser.parse_args())

        _outputs = installrec(**_parsed_args)
      image: gcr.io/arrikto/jupyter-kale:v0.5.0-47-g2427cc9
      securityContext: {runAsUser: 0}
      volumeMounts:
      - {mountPath: /home/jovyan, name: create-volume-1}
      - {mountPath: /home/jovyan/jupyter-kale-05-1-vol-1, name: create-volume-2}
      workingDir: /home/jovyan
    inputs:
      parameters:
      - {name: create-volume-1-name}
      - {name: create-volume-2-name}
    outputs:
      artifacts:
      - {name: mlpipeline-ui-metadata, path: /mlpipeline-ui-metadata.json}
      - {name: installrec, path: /installrec.html}
    metadata:
      annotations: {kubeflow-kale.org/dependent-templates: '["Pullrec", "create-volume-1",
          "create-volume-2"]', kubeflow-kale.org/volume-name-parameters: '["create-volume-1-name",
          "create-volume-2-name"]', pipelines.kubeflow.org/component_spec: '{"implementation":
          {"container": {"args": [], "command": ["python3", "-u", "-c", "def installrec():\n    from
          kale.common import mlmdutils as _kale_mlmdutils\n    _kale_mlmdutils.init_metadata()\n\n    from
          kale.common import podutils as _kale_podutils\n    _kale_mlmdutils.call(\"link_input_rok_artifacts\")\n    _kale_podutils.snapshot_pipeline_step(\n        \"pipeline2-u5c78\",\n        \"installrec\",\n        \"/home/jovyan/Untitled.ipynb\",\n        before=True)\n\n    data_loading_block
          = ''''''\n    # -----------------------DATA LOADING START--------------------------------\n    from
          kale.marshal import utils as _kale_marshal_utils\n    _kale_marshal_utils.set_kale_data_directory(\"/home/jovyan/.Untitled.ipynb.kale.marshal.dir\")\n    REPOSITORY
          = _kale_marshal_utils.load(\"REPOSITORY\")\n    run_sub = _kale_marshal_utils.load(\"run_sub\")\n    subprocess
          = _kale_marshal_utils.load(\"subprocess\")\n    # -----------------------DATA
          LOADING END----------------------------------\n    ''''''\n\n    block1
          = ''''''\n    run_sub(''pip3 install -r requirements.txt'', REPOSITORY)\n    run_sub(''python3
          setup.py build'', REPOSITORY)\n    run_sub(''python3 setup.py install --user'',
          REPOSITORY)\n    ''''''\n\n    data_saving_block = ''''''\n    # -----------------------DATA
          SAVING START---------------------------------\n    from kale.marshal import
          utils as _kale_marshal_utils\n    _kale_marshal_utils.set_kale_data_directory(\"/home/jovyan/.Untitled.ipynb.kale.marshal.dir\")\n    _kale_marshal_utils.save(REPOSITORY,
          \"REPOSITORY\")\n    _kale_marshal_utils.save(run_sub, \"run_sub\")\n    _kale_marshal_utils.save(subprocess,
          \"subprocess\")\n    # -----------------------DATA SAVING END-----------------------------------\n    ''''''\n\n    #
          run the code blocks inside a jupyter kernel\n    from kale.common.jputils
          import run_code as _kale_run_code\n    from kale.common.kfputils import
          \\\n        update_uimetadata as _kale_update_uimetadata\n    blocks = (data_loading_block,\n              block1,\n              data_saving_block)\n    html_artifact
          = _kale_run_code(blocks)\n    with open(\"/installrec.html\", \"w\") as
          f:\n        f.write(html_artifact)\n    _kale_update_uimetadata(''installrec'')\n\n    _rok_snapshot_task
          = _kale_podutils.snapshot_pipeline_step(\n        \"pipeline2-u5c78\",\n        \"installrec\",\n        \"/home/jovyan/Untitled.ipynb\",\n        before=False)\n    _kale_mlmdutils.call(\"submit_output_rok_artifact\",
          _rok_snapshot_task)\n\n    _kale_mlmdutils.call(\"mark_execution_complete\")\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Installrec'', description='''')\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = installrec(**_parsed_args)\n"],
          "image": "gcr.io/arrikto/jupyter-kale:v0.5.0-47-g2427cc9"}}, "name": "Installrec"}',
        pipelines.kubeflow.org/component_ref: '{}'}
      labels:
        access-ml-pipeline: "true"
        access-rok: "true"
        pipelines.kubeflow.org/metadata_written: "true"
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
    volumes:
    - name: create-volume-1
      persistentVolumeClaim: {claimName: '{{inputs.parameters.create-volume-1-name}}'}
    - name: create-volume-2
      persistentVolumeClaim: {claimName: '{{inputs.parameters.create-volume-2-name}}'}
  - name: pipeline2-u5c78
    inputs:
      parameters:
      - {name: rok_jupyter_kale_05_1_vol_1_cqvv2obcc_url}
      - {name: rok_workspace_jupyter_kale_05_1_2s0txj2ty_url}
    dag:
      tasks:
      - name: buildrec
        template: buildrec
        dependencies: [create-volume-1, create-volume-2, preprocessrec]
        arguments:
          parameters:
          - {name: create-volume-1-name, value: '{{tasks.create-volume-1.outputs.parameters.create-volume-1-name}}'}
          - {name: create-volume-2-name, value: '{{tasks.create-volume-2.outputs.parameters.create-volume-2-name}}'}
      - name: create-volume-1
        template: create-volume-1
        arguments:
          parameters:
          - {name: rok_workspace_jupyter_kale_05_1_2s0txj2ty_url, value: '{{inputs.parameters.rok_workspace_jupyter_kale_05_1_2s0txj2ty_url}}'}
      - name: create-volume-2
        template: create-volume-2
        arguments:
          parameters:
          - {name: rok_jupyter_kale_05_1_vol_1_cqvv2obcc_url, value: '{{inputs.parameters.rok_jupyter_kale_05_1_vol_1_cqvv2obcc_url}}'}
      - name: importrec
        template: importrec
        dependencies: [create-volume-1, create-volume-2]
        arguments:
          parameters:
          - {name: create-volume-1-name, value: '{{tasks.create-volume-1.outputs.parameters.create-volume-1-name}}'}
          - {name: create-volume-2-name, value: '{{tasks.create-volume-2.outputs.parameters.create-volume-2-name}}'}
      - name: installrec
        template: installrec
        dependencies: [create-volume-1, create-volume-2, pullrec]
        arguments:
          parameters:
          - {name: create-volume-1-name, value: '{{tasks.create-volume-1.outputs.parameters.create-volume-1-name}}'}
          - {name: create-volume-2-name, value: '{{tasks.create-volume-2.outputs.parameters.create-volume-2-name}}'}
      - name: preprocessrec
        template: preprocessrec
        dependencies: [create-volume-1, create-volume-2, installrec]
        arguments:
          parameters:
          - {name: create-volume-1-name, value: '{{tasks.create-volume-1.outputs.parameters.create-volume-1-name}}'}
          - {name: create-volume-2-name, value: '{{tasks.create-volume-2.outputs.parameters.create-volume-2-name}}'}
      - name: pullrec
        template: pullrec
        dependencies: [create-volume-1, create-volume-2, importrec]
        arguments:
          parameters:
          - {name: create-volume-1-name, value: '{{tasks.create-volume-1.outputs.parameters.create-volume-1-name}}'}
          - {name: create-volume-2-name, value: '{{tasks.create-volume-2.outputs.parameters.create-volume-2-name}}'}
      - name: saverec
        template: saverec
        dependencies: [buildrec, create-volume-1, create-volume-2]
        arguments:
          parameters:
          - {name: create-volume-1-name, value: '{{tasks.create-volume-1.outputs.parameters.create-volume-1-name}}'}
          - {name: create-volume-2-name, value: '{{tasks.create-volume-2.outputs.parameters.create-volume-2-name}}'}
  - name: preprocessrec
    container:
      args: []
      command:
      - python3
      - -u
      - -c
      - |
        def preprocessrec():
            from kale.common import mlmdutils as _kale_mlmdutils
            _kale_mlmdutils.init_metadata()

            from kale.common import podutils as _kale_podutils
            _kale_mlmdutils.call("link_input_rok_artifacts")
            _kale_podutils.snapshot_pipeline_step(
                "pipeline2-u5c78",
                "preprocessrec",
                "/home/jovyan/Untitled.ipynb",
                before=True)

            data_loading_block = '''
            # -----------------------DATA LOADING START--------------------------------
            from kale.marshal import utils as _kale_marshal_utils
            _kale_marshal_utils.set_kale_data_directory("/home/jovyan/.Untitled.ipynb.kale.marshal.dir")
            REPOSITORY = _kale_marshal_utils.load("REPOSITORY")
            run_sub = _kale_marshal_utils.load("run_sub")
            subprocess = _kale_marshal_utils.load("subprocess")
            # -----------------------DATA LOADING END----------------------------------
            '''

            block1 = '''
            run_sub('python3 steps/preprocess_step/preprocess.py', REPOSITORY)
            '''

            data_saving_block = '''
            # -----------------------DATA SAVING START---------------------------------
            from kale.marshal import utils as _kale_marshal_utils
            _kale_marshal_utils.set_kale_data_directory("/home/jovyan/.Untitled.ipynb.kale.marshal.dir")
            _kale_marshal_utils.save(REPOSITORY, "REPOSITORY")
            _kale_marshal_utils.save(run_sub, "run_sub")
            _kale_marshal_utils.save(subprocess, "subprocess")
            # -----------------------DATA SAVING END-----------------------------------
            '''

            # run the code blocks inside a jupyter kernel
            from kale.common.jputils import run_code as _kale_run_code
            from kale.common.kfputils import \
                update_uimetadata as _kale_update_uimetadata
            blocks = (data_loading_block,
                      block1,
                      data_saving_block)
            html_artifact = _kale_run_code(blocks)
            with open("/preprocessrec.html", "w") as f:
                f.write(html_artifact)
            _kale_update_uimetadata('preprocessrec')

            _rok_snapshot_task = _kale_podutils.snapshot_pipeline_step(
                "pipeline2-u5c78",
                "preprocessrec",
                "/home/jovyan/Untitled.ipynb",
                before=False)
            _kale_mlmdutils.call("submit_output_rok_artifact", _rok_snapshot_task)

            _kale_mlmdutils.call("mark_execution_complete")

        import argparse
        _parser = argparse.ArgumentParser(prog='Preprocessrec', description='')
        _parsed_args = vars(_parser.parse_args())

        _outputs = preprocessrec(**_parsed_args)
      image: gcr.io/arrikto/jupyter-kale:v0.5.0-47-g2427cc9
      securityContext: {runAsUser: 0}
      volumeMounts:
      - {mountPath: /home/jovyan, name: create-volume-1}
      - {mountPath: /home/jovyan/jupyter-kale-05-1-vol-1, name: create-volume-2}
      workingDir: /home/jovyan
    inputs:
      parameters:
      - {name: create-volume-1-name}
      - {name: create-volume-2-name}
    outputs:
      artifacts:
      - {name: mlpipeline-ui-metadata, path: /mlpipeline-ui-metadata.json}
      - {name: preprocessrec, path: /preprocessrec.html}
    metadata:
      annotations: {kubeflow-kale.org/dependent-templates: '["Installrec", "create-volume-1",
          "create-volume-2"]', kubeflow-kale.org/volume-name-parameters: '["create-volume-1-name",
          "create-volume-2-name"]', pipelines.kubeflow.org/component_spec: '{"implementation":
          {"container": {"args": [], "command": ["python3", "-u", "-c", "def preprocessrec():\n    from
          kale.common import mlmdutils as _kale_mlmdutils\n    _kale_mlmdutils.init_metadata()\n\n    from
          kale.common import podutils as _kale_podutils\n    _kale_mlmdutils.call(\"link_input_rok_artifacts\")\n    _kale_podutils.snapshot_pipeline_step(\n        \"pipeline2-u5c78\",\n        \"preprocessrec\",\n        \"/home/jovyan/Untitled.ipynb\",\n        before=True)\n\n    data_loading_block
          = ''''''\n    # -----------------------DATA LOADING START--------------------------------\n    from
          kale.marshal import utils as _kale_marshal_utils\n    _kale_marshal_utils.set_kale_data_directory(\"/home/jovyan/.Untitled.ipynb.kale.marshal.dir\")\n    REPOSITORY
          = _kale_marshal_utils.load(\"REPOSITORY\")\n    run_sub = _kale_marshal_utils.load(\"run_sub\")\n    subprocess
          = _kale_marshal_utils.load(\"subprocess\")\n    # -----------------------DATA
          LOADING END----------------------------------\n    ''''''\n\n    block1
          = ''''''\n    run_sub(''python3 steps/preprocess_step/preprocess.py'', REPOSITORY)\n    ''''''\n\n    data_saving_block
          = ''''''\n    # -----------------------DATA SAVING START---------------------------------\n    from
          kale.marshal import utils as _kale_marshal_utils\n    _kale_marshal_utils.set_kale_data_directory(\"/home/jovyan/.Untitled.ipynb.kale.marshal.dir\")\n    _kale_marshal_utils.save(REPOSITORY,
          \"REPOSITORY\")\n    _kale_marshal_utils.save(run_sub, \"run_sub\")\n    _kale_marshal_utils.save(subprocess,
          \"subprocess\")\n    # -----------------------DATA SAVING END-----------------------------------\n    ''''''\n\n    #
          run the code blocks inside a jupyter kernel\n    from kale.common.jputils
          import run_code as _kale_run_code\n    from kale.common.kfputils import
          \\\n        update_uimetadata as _kale_update_uimetadata\n    blocks = (data_loading_block,\n              block1,\n              data_saving_block)\n    html_artifact
          = _kale_run_code(blocks)\n    with open(\"/preprocessrec.html\", \"w\")
          as f:\n        f.write(html_artifact)\n    _kale_update_uimetadata(''preprocessrec'')\n\n    _rok_snapshot_task
          = _kale_podutils.snapshot_pipeline_step(\n        \"pipeline2-u5c78\",\n        \"preprocessrec\",\n        \"/home/jovyan/Untitled.ipynb\",\n        before=False)\n    _kale_mlmdutils.call(\"submit_output_rok_artifact\",
          _rok_snapshot_task)\n\n    _kale_mlmdutils.call(\"mark_execution_complete\")\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Preprocessrec'', description='''')\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = preprocessrec(**_parsed_args)\n"],
          "image": "gcr.io/arrikto/jupyter-kale:v0.5.0-47-g2427cc9"}}, "name": "Preprocessrec"}',
        pipelines.kubeflow.org/component_ref: '{}'}
      labels:
        access-ml-pipeline: "true"
        access-rok: "true"
        pipelines.kubeflow.org/metadata_written: "true"
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
    volumes:
    - name: create-volume-1
      persistentVolumeClaim: {claimName: '{{inputs.parameters.create-volume-1-name}}'}
    - name: create-volume-2
      persistentVolumeClaim: {claimName: '{{inputs.parameters.create-volume-2-name}}'}
  - name: pullrec
    container:
      args: []
      command:
      - python3
      - -u
      - -c
      - |
        def pullrec():
            from kale.common import mlmdutils as _kale_mlmdutils
            _kale_mlmdutils.init_metadata()

            from kale.common import podutils as _kale_podutils
            _kale_mlmdutils.call("link_input_rok_artifacts")
            _kale_podutils.snapshot_pipeline_step(
                "pipeline2-u5c78",
                "pullrec",
                "/home/jovyan/Untitled.ipynb",
                before=True)

            data_loading_block = '''
            # -----------------------DATA LOADING START--------------------------------
            from kale.marshal import utils as _kale_marshal_utils
            _kale_marshal_utils.set_kale_data_directory("/home/jovyan/.Untitled.ipynb.kale.marshal.dir")
            REPOSITORY = _kale_marshal_utils.load("REPOSITORY")
            run_sub = _kale_marshal_utils.load("run_sub")
            subprocess = _kale_marshal_utils.load("subprocess")
            # -----------------------DATA LOADING END----------------------------------
            '''

            block1 = '''
            run_sub('git checkout minikf-setup', REPOSITORY)
            run_sub('git pull', REPOSITORY)
            '''

            data_saving_block = '''
            # -----------------------DATA SAVING START---------------------------------
            from kale.marshal import utils as _kale_marshal_utils
            _kale_marshal_utils.set_kale_data_directory("/home/jovyan/.Untitled.ipynb.kale.marshal.dir")
            _kale_marshal_utils.save(REPOSITORY, "REPOSITORY")
            _kale_marshal_utils.save(run_sub, "run_sub")
            _kale_marshal_utils.save(subprocess, "subprocess")
            # -----------------------DATA SAVING END-----------------------------------
            '''

            # run the code blocks inside a jupyter kernel
            from kale.common.jputils import run_code as _kale_run_code
            from kale.common.kfputils import \
                update_uimetadata as _kale_update_uimetadata
            blocks = (data_loading_block,
                      block1,
                      data_saving_block)
            html_artifact = _kale_run_code(blocks)
            with open("/pullrec.html", "w") as f:
                f.write(html_artifact)
            _kale_update_uimetadata('pullrec')

            _rok_snapshot_task = _kale_podutils.snapshot_pipeline_step(
                "pipeline2-u5c78",
                "pullrec",
                "/home/jovyan/Untitled.ipynb",
                before=False)
            _kale_mlmdutils.call("submit_output_rok_artifact", _rok_snapshot_task)

            _kale_mlmdutils.call("mark_execution_complete")

        import argparse
        _parser = argparse.ArgumentParser(prog='Pullrec', description='')
        _parsed_args = vars(_parser.parse_args())

        _outputs = pullrec(**_parsed_args)
      image: gcr.io/arrikto/jupyter-kale:v0.5.0-47-g2427cc9
      securityContext: {runAsUser: 0}
      volumeMounts:
      - {mountPath: /home/jovyan, name: create-volume-1}
      - {mountPath: /home/jovyan/jupyter-kale-05-1-vol-1, name: create-volume-2}
      workingDir: /home/jovyan
    inputs:
      parameters:
      - {name: create-volume-1-name}
      - {name: create-volume-2-name}
    outputs:
      artifacts:
      - {name: mlpipeline-ui-metadata, path: /mlpipeline-ui-metadata.json}
      - {name: pullrec, path: /pullrec.html}
    metadata:
      annotations: {kubeflow-kale.org/dependent-templates: '["Importrec", "create-volume-1",
          "create-volume-2"]', kubeflow-kale.org/volume-name-parameters: '["create-volume-1-name",
          "create-volume-2-name"]', pipelines.kubeflow.org/component_spec: '{"implementation":
          {"container": {"args": [], "command": ["python3", "-u", "-c", "def pullrec():\n    from
          kale.common import mlmdutils as _kale_mlmdutils\n    _kale_mlmdutils.init_metadata()\n\n    from
          kale.common import podutils as _kale_podutils\n    _kale_mlmdutils.call(\"link_input_rok_artifacts\")\n    _kale_podutils.snapshot_pipeline_step(\n        \"pipeline2-u5c78\",\n        \"pullrec\",\n        \"/home/jovyan/Untitled.ipynb\",\n        before=True)\n\n    data_loading_block
          = ''''''\n    # -----------------------DATA LOADING START--------------------------------\n    from
          kale.marshal import utils as _kale_marshal_utils\n    _kale_marshal_utils.set_kale_data_directory(\"/home/jovyan/.Untitled.ipynb.kale.marshal.dir\")\n    REPOSITORY
          = _kale_marshal_utils.load(\"REPOSITORY\")\n    run_sub = _kale_marshal_utils.load(\"run_sub\")\n    subprocess
          = _kale_marshal_utils.load(\"subprocess\")\n    # -----------------------DATA
          LOADING END----------------------------------\n    ''''''\n\n    block1
          = ''''''\n    run_sub(''git checkout minikf-setup'', REPOSITORY)\n    run_sub(''git
          pull'', REPOSITORY)\n    ''''''\n\n    data_saving_block = ''''''\n    #
          -----------------------DATA SAVING START---------------------------------\n    from
          kale.marshal import utils as _kale_marshal_utils\n    _kale_marshal_utils.set_kale_data_directory(\"/home/jovyan/.Untitled.ipynb.kale.marshal.dir\")\n    _kale_marshal_utils.save(REPOSITORY,
          \"REPOSITORY\")\n    _kale_marshal_utils.save(run_sub, \"run_sub\")\n    _kale_marshal_utils.save(subprocess,
          \"subprocess\")\n    # -----------------------DATA SAVING END-----------------------------------\n    ''''''\n\n    #
          run the code blocks inside a jupyter kernel\n    from kale.common.jputils
          import run_code as _kale_run_code\n    from kale.common.kfputils import
          \\\n        update_uimetadata as _kale_update_uimetadata\n    blocks = (data_loading_block,\n              block1,\n              data_saving_block)\n    html_artifact
          = _kale_run_code(blocks)\n    with open(\"/pullrec.html\", \"w\") as f:\n        f.write(html_artifact)\n    _kale_update_uimetadata(''pullrec'')\n\n    _rok_snapshot_task
          = _kale_podutils.snapshot_pipeline_step(\n        \"pipeline2-u5c78\",\n        \"pullrec\",\n        \"/home/jovyan/Untitled.ipynb\",\n        before=False)\n    _kale_mlmdutils.call(\"submit_output_rok_artifact\",
          _rok_snapshot_task)\n\n    _kale_mlmdutils.call(\"mark_execution_complete\")\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Pullrec'', description='''')\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = pullrec(**_parsed_args)\n"],
          "image": "gcr.io/arrikto/jupyter-kale:v0.5.0-47-g2427cc9"}}, "name": "Pullrec"}',
        pipelines.kubeflow.org/component_ref: '{}'}
      labels:
        access-ml-pipeline: "true"
        access-rok: "true"
        pipelines.kubeflow.org/metadata_written: "true"
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
    volumes:
    - name: create-volume-1
      persistentVolumeClaim: {claimName: '{{inputs.parameters.create-volume-1-name}}'}
    - name: create-volume-2
      persistentVolumeClaim: {claimName: '{{inputs.parameters.create-volume-2-name}}'}
  - name: saverec
    container:
      args: []
      command:
      - python3
      - -u
      - -c
      - |
        def saverec():
            from kale.common import mlmdutils as _kale_mlmdutils
            _kale_mlmdutils.init_metadata()

            from kale.common import podutils as _kale_podutils
            _kale_mlmdutils.call("link_input_rok_artifacts")
            _kale_podutils.snapshot_pipeline_step(
                "pipeline2-u5c78",
                "saverec",
                "/home/jovyan/Untitled.ipynb",
                before=True)

            data_loading_block = '''
            # -----------------------DATA LOADING START--------------------------------
            from kale.marshal import utils as _kale_marshal_utils
            _kale_marshal_utils.set_kale_data_directory("/home/jovyan/.Untitled.ipynb.kale.marshal.dir")
            REPOSITORY = _kale_marshal_utils.load("REPOSITORY")
            run_sub = _kale_marshal_utils.load("run_sub")
            subprocess = _kale_marshal_utils.load("subprocess")
            # -----------------------DATA LOADING END----------------------------------
            '''

            block1 = '''
            from datetime import datetime
            now = str(datetime.timestamp(datetime.now()))
            run_sub('gsutil cp lightfm.p gs://mokarakayamodels2/staging/lightfm.p' + now , REPOSITORY)
            '''

            # run the code blocks inside a jupyter kernel
            from kale.common.jputils import run_code as _kale_run_code
            from kale.common.kfputils import \
                update_uimetadata as _kale_update_uimetadata
            blocks = (data_loading_block,
                      block1,
                      )
            html_artifact = _kale_run_code(blocks)
            with open("/saverec.html", "w") as f:
                f.write(html_artifact)
            _kale_update_uimetadata('saverec')

            _rok_snapshot_task = _kale_podutils.snapshot_pipeline_step(
                "pipeline2-u5c78",
                "saverec",
                "/home/jovyan/Untitled.ipynb",
                before=False)
            _kale_mlmdutils.call("submit_output_rok_artifact", _rok_snapshot_task)

            _kale_mlmdutils.call("mark_execution_complete")

        import argparse
        _parser = argparse.ArgumentParser(prog='Saverec', description='')
        _parsed_args = vars(_parser.parse_args())

        _outputs = saverec(**_parsed_args)
      image: gcr.io/arrikto/jupyter-kale:v0.5.0-47-g2427cc9
      securityContext: {runAsUser: 0}
      volumeMounts:
      - {mountPath: /home/jovyan, name: create-volume-1}
      - {mountPath: /home/jovyan/jupyter-kale-05-1-vol-1, name: create-volume-2}
      workingDir: /home/jovyan
    inputs:
      parameters:
      - {name: create-volume-1-name}
      - {name: create-volume-2-name}
    outputs:
      artifacts:
      - {name: mlpipeline-ui-metadata, path: /mlpipeline-ui-metadata.json}
      - {name: saverec, path: /saverec.html}
    metadata:
      annotations: {kubeflow-kale.org/dependent-templates: '["Buildrec", "create-volume-1",
          "create-volume-2"]', kubeflow-kale.org/volume-name-parameters: '["create-volume-1-name",
          "create-volume-2-name"]', pipelines.kubeflow.org/component_spec: '{"implementation":
          {"container": {"args": [], "command": ["python3", "-u", "-c", "def saverec():\n    from
          kale.common import mlmdutils as _kale_mlmdutils\n    _kale_mlmdutils.init_metadata()\n\n    from
          kale.common import podutils as _kale_podutils\n    _kale_mlmdutils.call(\"link_input_rok_artifacts\")\n    _kale_podutils.snapshot_pipeline_step(\n        \"pipeline2-u5c78\",\n        \"saverec\",\n        \"/home/jovyan/Untitled.ipynb\",\n        before=True)\n\n    data_loading_block
          = ''''''\n    # -----------------------DATA LOADING START--------------------------------\n    from
          kale.marshal import utils as _kale_marshal_utils\n    _kale_marshal_utils.set_kale_data_directory(\"/home/jovyan/.Untitled.ipynb.kale.marshal.dir\")\n    REPOSITORY
          = _kale_marshal_utils.load(\"REPOSITORY\")\n    run_sub = _kale_marshal_utils.load(\"run_sub\")\n    subprocess
          = _kale_marshal_utils.load(\"subprocess\")\n    # -----------------------DATA
          LOADING END----------------------------------\n    ''''''\n\n    block1
          = ''''''\n    from datetime import datetime\n    now = str(datetime.timestamp(datetime.now()))\n    run_sub(''gsutil
          cp lightfm.p gs://mokarakayamodels2/staging/lightfm.p'' + now , REPOSITORY)\n    ''''''\n\n    #
          run the code blocks inside a jupyter kernel\n    from kale.common.jputils
          import run_code as _kale_run_code\n    from kale.common.kfputils import
          \\\n        update_uimetadata as _kale_update_uimetadata\n    blocks = (data_loading_block,\n              block1,\n              )\n    html_artifact
          = _kale_run_code(blocks)\n    with open(\"/saverec.html\", \"w\") as f:\n        f.write(html_artifact)\n    _kale_update_uimetadata(''saverec'')\n\n    _rok_snapshot_task
          = _kale_podutils.snapshot_pipeline_step(\n        \"pipeline2-u5c78\",\n        \"saverec\",\n        \"/home/jovyan/Untitled.ipynb\",\n        before=False)\n    _kale_mlmdutils.call(\"submit_output_rok_artifact\",
          _rok_snapshot_task)\n\n    _kale_mlmdutils.call(\"mark_execution_complete\")\n\nimport
          argparse\n_parser = argparse.ArgumentParser(prog=''Saverec'', description='''')\n_parsed_args
          = vars(_parser.parse_args())\n\n_outputs = saverec(**_parsed_args)\n"],
          "image": "gcr.io/arrikto/jupyter-kale:v0.5.0-47-g2427cc9"}}, "name": "Saverec"}',
        pipelines.kubeflow.org/component_ref: '{}'}
      labels:
        access-ml-pipeline: "true"
        access-rok: "true"
        pipelines.kubeflow.org/metadata_written: "true"
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
    volumes:
    - name: create-volume-1
      persistentVolumeClaim: {claimName: '{{inputs.parameters.create-volume-1-name}}'}
    - name: create-volume-2
      persistentVolumeClaim: {claimName: '{{inputs.parameters.create-volume-2-name}}'}
  arguments:
    parameters:
    - {name: rok_jupyter_kale_05_1_vol_1_cqvv2obcc_url, value: 'http://rok.rok.svc.cluster.local/swift/v1/kubeflow-user/notebooks/jupyter-kale-05-1-0_jupyter-kale-05-1-vol-1-cqvv2obcc?version=c2fb1679-0f4c-4599-ba8c-a0b815fcd489'}
    - {name: rok_workspace_jupyter_kale_05_1_2s0txj2ty_url, value: 'http://rok.rok.svc.cluster.local/swift/v1/kubeflow-user/notebooks/jupyter-kale-05-1-0_workspace-jupyter-kale-05-1-2s0txj2ty?version=254b9211-2faa-4f04-b828-29d8ccd76b00'}
  serviceAccountName: pipeline-runner
